import React, { useState, useEffect } from "react";
import Input from "../components/Input.jsx";
import { register, verifyOTP } from "../services/api.js";

export default function Register() {
  const [step, setStep] = useState(1); // 1 = р╕Бр╕гр╕нр╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е, 2 = OTP
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [otp, setOtp] = useState("");
  const [message, setMessage] = useState("");
  const [countdown, setCountdown] = useState(0); // р╕Щр╕▒р╕Ър╕Цр╕нр╕вр╕лр╕ер╕▒р╕З 60 р╕зр╕┤
  const [loading, setLoading] = useState(false);

  // ЁЯХТ р╕Хр╕▒р╕зр╕Ир╕▒р╕Ър╣Ар╕зр╕ер╕▓ OTP Countdown
  useEffect(() => {
    if (countdown <= 0) return;
    const timer = setInterval(() => setCountdown((prev) => prev - 1), 1000);
    return () => clearInterval(timer);
  }, [countdown]);

  // ЁЯУи р╕Вр╕н OTP (р╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕бр╕▒р╕Др╕гр╣Ар╕Ър╕╖р╣Йр╕нр╕Зр╕Хр╣Йр╕Щ)
  const handleSendOTP = async () => {
    if (!name || !email || !password) {
      setMessage("тЪая╕П р╕Бр╕гр╕╕р╕Ур╕▓р╕Бр╕гр╕нр╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕лр╣Йр╕Др╕гр╕Ъ");
      return;
    }
    setLoading(true);
    try {
      const res = await register(name, email, password);
      setMessage(res.data.message || "ЁЯУй р╕кр╣Ир╕З OTP р╕кр╕│р╣Ар╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕нр╕╡р╣Ар╕бр╕ер╕Вр╕нр╕Зр╕Др╕╕р╕У");
      setStep(2);
      setCountdown(60); // р╣Ар╕гр╕┤р╣Ир╕бр╕Щр╕▒р╕Ър╕Цр╕нр╕вр╕лр╕ер╕▒р╕Зр╣Гр╕лр╕бр╣И
    } catch (err) {
      setMessage(err.response?.data?.message || "тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╣Ир╕З OTP р╣Др╕Фр╣Й");
    } finally {
      setLoading(false);
    }
  };

  // тЬЕ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ OTP
  const handleVerifyOTP = async () => {
    if (!otp) {
      setMessage("тЪая╕П р╕Бр╕гр╕╕р╕Ур╕▓р╕Бр╕гр╕нр╕Бр╕гр╕лр╕▒р╕к OTP");
      return;
    }
    setLoading(true);
    try {
      const res = await verifyOTP(email, otp);
      setMessage(res.data.message || "тЬЕ р╕вр╕╖р╕Щр╕вр╕▒р╕Щ OTP р╕кр╕│р╣Ар╕гр╣Зр╕И! р╕кр╕бр╕▒р╕Др╕гр╕кр╕бр╕▓р╕Кр╕┤р╕Бр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з");

      // Reset form р╕лр╕ер╕▒р╕Зр╕кр╕бр╕▒р╕Др╕гр╣Ар╕кр╕гр╣Зр╕И
      setStep(1);
      setName("");
      setEmail("");
      setPassword("");
      setOtp("");
      setCountdown(0);
    } catch (err) {
      setMessage(err.response?.data?.message || "тЭМ р╕гр╕лр╕▒р╕к OTP р╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕Зр╕лр╕гр╕╖р╕нр╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕");
    } finally {
      setLoading(false);
    }
  };

  // ЁЯФД р╕Вр╕н OTP р╣Гр╕лр╕бр╣И
  const handleResendOTP = async () => {
    if (countdown > 0) return;
    await handleSendOTP();
  };

  return (
    <div className="max-w-md mx-auto mt-20 p-6 border rounded shadow bg-white">
      <h2 className="text-2xl font-bold mb-4 text-center">р╕ер╕Зр╕Чр╕░р╣Ар╕Ър╕╡р╕вр╕Щ</h2>

      {step === 1 && (
        <>
          <Input label="р╕Кр╕╖р╣Ир╕н" type="text" value={name} onChange={(e) => setName(e.target.value)} />
          <Input label="р╕нр╕╡р╣Ар╕бр╕ер╣М" type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
          <Input label="р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ" type="password" value={password} onChange={(e) => setPassword(e.target.value)} />

          <button
            onClick={handleSendOTP}
            disabled={loading}
            className={`w-full mt-4 py-2 rounded text-white ${
              loading ? "bg-green-400" : "bg-green-600 hover:bg-green-700"
            }`}
          >
            {loading ? "р╕Бр╕│р╕ер╕▒р╕Зр╕кр╣Ир╕З OTP..." : "р╕кр╣Ир╕Зр╕гр╕лр╕▒р╕к OTP"}
          </button>
        </>
      )}

      {step === 2 && (
        <>
          <p className="mb-2 text-sm text-gray-700">
            ЁЯФР р╕Бр╕гр╕╕р╕Ур╕▓р╕Бр╕гр╕нр╕Бр╕гр╕лр╕▒р╕к OTP р╕Чр╕╡р╣Ир╕кр╣Ир╕Зр╣Др╕Ыр╕вр╕▒р╕З <span className="font-medium">{email}</span>
          </p>

          <Input label="р╕гр╕лр╕▒р╕к OTP" type="text" value={otp} onChange={(e) => setOtp(e.target.value)} />

          <button
            onClick={handleVerifyOTP}
            disabled={loading}
            className={`w-full mt-4 py-2 rounded text-white ${
              loading ? "bg-blue-400" : "bg-blue-600 hover:bg-blue-700"
            }`}
          >
            {loading ? "р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ..." : "р╕вр╕╖р╕Щр╕вр╕▒р╕Щ OTP"}
          </button>

          <button
            onClick={handleResendOTP}
            disabled={countdown > 0 || loading}
            className={`w-full mt-3 py-2 rounded border ${
              countdown > 0
                ? "bg-gray-100 text-gray-500 cursor-not-allowed"
                : "bg-white text-blue-600 border-blue-500 hover:bg-blue-50"
            }`}
          >
            {countdown > 0 ? `р╕Вр╕нр╕гр╕лр╕▒р╕кр╣Гр╕лр╕бр╣Ир╣Др╕Фр╣Йр╣Гр╕Щ ${countdown} р╕зр╕┤` : "р╕Вр╕нр╕гр╕лр╕▒р╕к OTP р╣Гр╕лр╕бр╣И"}
          </button>
        </>
      )}

      {message && (
        <p
          className={`mt-4 text-sm text-center ${
            message.startsWith("тЬЕ") || message.startsWith("ЁЯУй")
              ? "text-green-600"
              : message.startsWith("тЪая╕П")
              ? "text-yellow-600"
              : "text-red-500"
          }`}
        >
          {message}
        </p>
      )}
    </div>
  );
}
